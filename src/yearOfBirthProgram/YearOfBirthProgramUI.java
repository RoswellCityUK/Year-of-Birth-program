/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package yearOfBirthProgram;

import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.YearMonth;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import javax.script.*;
import java.util.*;

/**
 *
 * @author Tomasz Grabowski
 */
public class YearOfBirthProgramUI extends javax.swing.JFrame {

    private boolean initialisationFinished = false;
    
    private int DOBDay = 0;
    private int DOBMonth = 0;
    private int DOBYear = 0;
    private LocalDate DOBDate;
    
    private final LocalDate dateToday = LocalDate.now();
    /**
     * Creates new form YearOfBirthProgramUI
     */
    public YearOfBirthProgramUI() {
        initComponents();
        
        populateDOBYearComboBox();
        populateDOBMonthComboBox();
        initialisationFinished = true;
        
        populateDOBDayComboBox();
        cboxDOBDay.setSelectedItem(24);
        cboxSelectedUnits.setSelectedItem("miliseconds");
        
        readSelectedDate();
        updateInformations();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDateOfBirth = new javax.swing.JPanel();
        lblDOBYear = new javax.swing.JLabel();
        cboxDOBYear = new javax.swing.JComboBox<>();
        lblDOBMonth = new javax.swing.JLabel();
        cboxDOBMonth = new javax.swing.JComboBox<>();
        lblDOBDay = new javax.swing.JLabel();
        cboxDOBDay = new javax.swing.JComboBox<>();
        lblDOBDayOfTheWeek = new javax.swing.JLabel();
        lblDayOfTheWeek = new javax.swing.JLabel();
        pnlGeneralFacts = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTotalAmount = new javax.swing.JLabel();
        cboxSelectedUnits = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblDayOfYear = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblWeekOfYear = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblZodiacSign = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lblNatureElement = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lblBirthstone = new javax.swing.JLabel();
        lblYears = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        lblMonths = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        lblDays = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        pnlFunnyFacts = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        lblNailsTotalLenght = new javax.swing.JLabel();
        lblDescNails = new javax.swing.JLabel();
        lblHairTotalLenght = new javax.swing.JLabel();
        lblDescHair = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        lblEarthTravelDistance = new javax.swing.JLabel();
        lblDescEarthTravelDistance = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        lblHeartBeatsTotal = new javax.swing.JLabel();
        lblDescHeartBeats = new javax.swing.JLabel();
        lblBloodLitersTotal = new javax.swing.JLabel();
        lblDescBloodLiters = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        lblBreathsTotal = new javax.swing.JLabel();
        lblDescBreathsTotal = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        lblSnailTravelDistanceTotal = new javax.swing.JLabel();
        lblDescSnailTravelTotal = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        pnlHoroscope = new javax.swing.JPanel();
        lblHoroscopeFor = new javax.swing.JLabel();
        cboHoroscopeFor = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHoroscope = new javax.swing.JTextArea();
        lblAuthor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fun facts about your Birthday!");

        pnlDateOfBirth.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter your date of birth:"));
        pnlDateOfBirth.setFocusTraversalPolicyProvider(true);

        lblDOBYear.setText("Year:");

        cboxDOBYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        cboxDOBYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxDOBYearActionPerformed(evt);
            }
        });

        lblDOBMonth.setText("Month:");

        cboxDOBMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        cboxDOBMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxDOBMonthActionPerformed(evt);
            }
        });

        lblDOBDay.setText("Day:");

        cboxDOBDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        cboxDOBDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxDOBDayActionPerformed(evt);
            }
        });

        lblDOBDayOfTheWeek.setText("Day of the week:");

        lblDayOfTheWeek.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDayOfTheWeek.setText("Sunday");

        javax.swing.GroupLayout pnlDateOfBirthLayout = new javax.swing.GroupLayout(pnlDateOfBirth);
        pnlDateOfBirth.setLayout(pnlDateOfBirthLayout);
        pnlDateOfBirthLayout.setHorizontalGroup(
            pnlDateOfBirthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDateOfBirthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDOBYear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxDOBYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDOBMonth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxDOBMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDOBDay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxDOBDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDOBDayOfTheWeek)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDayOfTheWeek)
                .addContainerGap(112, Short.MAX_VALUE))
        );
        pnlDateOfBirthLayout.setVerticalGroup(
            pnlDateOfBirthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDateOfBirthLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDateOfBirthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDOBYear)
                    .addComponent(cboxDOBYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDOBMonth)
                    .addComponent(cboxDOBMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDOBDay)
                    .addComponent(cboxDOBDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDOBDayOfTheWeek)
                    .addComponent(lblDayOfTheWeek))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlGeneralFacts.setBorder(javax.swing.BorderFactory.createTitledBorder("General facts:"));

        jLabel1.setText("You are");

        jLabel5.setText("Which is");

        lblTotalAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTotalAmount.setText("XX");

        cboxSelectedUnits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "years", "months", "days", "hours", "minutes", "seconds", "miliseconds" }));
        cboxSelectedUnits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxSelectedUnitsActionPerformed(evt);
            }
        });

        jLabel7.setText("in total.");

        jLabel8.setText("You have been born on");

        lblDayOfYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDayOfYear.setText("XX");

        jLabel10.setText("day and");

        lblWeekOfYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblWeekOfYear.setText("XX");

        jLabel12.setText("week of a year:");

        lblYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblYear.setText("XXXX");

        jLabel15.setText("Your Zodiac sign:");

        lblZodiacSign.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblZodiacSign.setText("XXXX");

        jLabel17.setText("Your Nature Element:");

        lblNatureElement.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNatureElement.setText("XXXX");

        jLabel19.setText("Your birthstone:");

        lblBirthstone.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblBirthstone.setText("XXXX");

        lblYears.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblYears.setText("XX");

        jLabel50.setText("years,");

        lblMonths.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMonths.setText("XX");

        jLabel52.setText("months and");

        lblDays.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDays.setText("XX");

        jLabel54.setText("days old.");

        javax.swing.GroupLayout pnlGeneralFactsLayout = new javax.swing.GroupLayout(pnlGeneralFacts);
        pnlGeneralFacts.setLayout(pnlGeneralFactsLayout);
        pnlGeneralFactsLayout.setHorizontalGroup(
            pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblYears)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMonths)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel52)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDays)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel54))
                    .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalAmount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboxSelectedUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDayOfYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblWeekOfYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblYear))
                    .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblZodiacSign))
                    .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNatureElement))
                    .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBirthstone)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlGeneralFactsLayout.setVerticalGroup(
            pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralFactsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblYears)
                    .addComponent(jLabel50)
                    .addComponent(lblMonths)
                    .addComponent(jLabel52)
                    .addComponent(lblDays)
                    .addComponent(jLabel54))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblTotalAmount)
                    .addComponent(cboxSelectedUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblDayOfYear)
                    .addComponent(jLabel10)
                    .addComponent(lblWeekOfYear)
                    .addComponent(jLabel12)
                    .addComponent(lblYear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(lblZodiacSign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(lblNatureElement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(lblBirthstone))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlFunnyFacts.setBorder(javax.swing.BorderFactory.createTitledBorder("Did you know that?"));

        jLabel21.setText("Since your birthday you grown:");

        lblNailsTotalLenght.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNailsTotalLenght.setText("XXXX");

        lblDescNails.setText("m of nails.");

        lblHairTotalLenght.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHairTotalLenght.setText("XXXX");

        lblDescHair.setText("m of hair.");

        jLabel26.setText("Since your birthday Earth have travelled");

        lblEarthTravelDistance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEarthTravelDistance.setText("XXXX");

        lblDescEarthTravelDistance.setText("AU around the Sun.");

        jLabel29.setText("Since your birthday your hearth beat around");

        lblHeartBeatsTotal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHeartBeatsTotal.setText("XXXX");

        lblDescHeartBeats.setText("times");

        lblBloodLitersTotal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblBloodLitersTotal.setText("XXXX");

        lblDescBloodLiters.setText("liters of blood through your vains.");

        jLabel34.setText("and pumped");

        jLabel35.setText("During your lifetime you managed to do around");

        lblBreathsTotal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblBreathsTotal.setText("XXXX");

        lblDescBreathsTotal.setText("breaths.");

        jLabel38.setText("As a snail you would travel around");

        lblSnailTravelDistanceTotal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSnailTravelDistanceTotal.setText("XXXX");

        lblDescSnailTravelTotal.setText("km since your birthday.");

        javax.swing.GroupLayout pnlFunnyFactsLayout = new javax.swing.GroupLayout(pnlFunnyFacts);
        pnlFunnyFacts.setLayout(pnlFunnyFactsLayout);
        pnlFunnyFactsLayout.setHorizontalGroup(
            pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEarthTravelDistance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescEarthTravelDistance))
                    .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHeartBeatsTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescHeartBeats))
                    .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                                .addComponent(lblHairTotalLenght)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDescHair))
                            .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                                .addComponent(lblNailsTotalLenght)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDescNails))))
                    .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBloodLitersTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescBloodLiters))
                    .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBreathsTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescBreathsTotal))
                    .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSnailTravelDistanceTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescSnailTravelTotal)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFunnyFactsLayout.setVerticalGroup(
            pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFunnyFactsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNailsTotalLenght)
                    .addComponent(lblDescNails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHairTotalLenght)
                    .addComponent(lblDescHair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(lblEarthTravelDistance)
                    .addComponent(lblDescEarthTravelDistance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(lblHeartBeatsTotal)
                    .addComponent(lblDescHeartBeats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBloodLitersTotal)
                    .addComponent(lblDescBloodLiters)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(lblBreathsTotal)
                    .addComponent(lblDescBreathsTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFunnyFactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(lblSnailTravelDistanceTotal)
                    .addComponent(lblDescSnailTravelTotal))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        pnlHoroscope.setBorder(javax.swing.BorderFactory.createTitledBorder("Horoscope"));

        lblHoroscopeFor.setText("For");

        cboHoroscopeFor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Today", "Tomorrow", "Yesterday" }));
        cboHoroscopeFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboHoroscopeForActionPerformed(evt);
            }
        });

        txtHoroscope.setColumns(20);
        txtHoroscope.setLineWrap(true);
        txtHoroscope.setRows(5);
        jScrollPane1.setViewportView(txtHoroscope);

        javax.swing.GroupLayout pnlHoroscopeLayout = new javax.swing.GroupLayout(pnlHoroscope);
        pnlHoroscope.setLayout(pnlHoroscopeLayout);
        pnlHoroscopeLayout.setHorizontalGroup(
            pnlHoroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHoroscopeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHoroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlHoroscopeLayout.createSequentialGroup()
                        .addComponent(lblHoroscopeFor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboHoroscopeFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlHoroscopeLayout.setVerticalGroup(
            pnlHoroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHoroscopeLayout.createSequentialGroup()
                .addGroup(pnlHoroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHoroscopeFor)
                    .addComponent(cboHoroscopeFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblAuthor.setText("Author: Tomasz Grabowski");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlHoroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlGeneralFacts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFunnyFacts, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAuthor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlGeneralFacts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFunnyFacts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlHoroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(lblAuthor))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void cboxDOBDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxDOBDayActionPerformed
        updateInformations();
    }//GEN-LAST:event_cboxDOBDayActionPerformed

    private void cboxDOBMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxDOBMonthActionPerformed
        populateDOBDayComboBox();
        updateInformations();
    }//GEN-LAST:event_cboxDOBMonthActionPerformed

    private void cboxDOBYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxDOBYearActionPerformed
        populateDOBDayComboBox();
        updateInformations();
    }//GEN-LAST:event_cboxDOBYearActionPerformed

    private void cboxSelectedUnitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxSelectedUnitsActionPerformed
        updateInformations();
    }//GEN-LAST:event_cboxSelectedUnitsActionPerformed

    private void cboHoroscopeForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboHoroscopeForActionPerformed
        getHoroscope(lblZodiacSign.getText(), cboHoroscopeFor.getSelectedItem().toString());
    }//GEN-LAST:event_cboHoroscopeForActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YearOfBirthProgramUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new YearOfBirthProgramUI().setVisible(true);
        });
    }
    
    private void populateDOBYearComboBox(){
        ArrayList<Integer> arrayYears = new ArrayList<>();
        
        for(int i = 1900; i <= dateToday.getYear(); i++)
        {
            arrayYears.add(i);
        }
        
        cboxDOBYear.setModel(new DefaultComboBoxModel(arrayYears.toArray()));
        cboxDOBYear.setSelectedItem(1989);
    }
    
    private void populateDOBMonthComboBox(){
        ArrayList<String> arrayMonths = new ArrayList<>();
        
        for (int i = 1; i <= 12; i++)
        {
            arrayMonths.add(Month.of(i).toString());           
        }

        cboxDOBMonth.setModel(new DefaultComboBoxModel(arrayMonths.toArray()));
        cboxDOBMonth.setSelectedItem("AUGUST");
    }
    
    private void populateDOBDayComboBox(){
        if(initialisationFinished){
            int previouslySelectedDay = Integer.parseInt(cboxDOBDay.getSelectedItem().toString());

            ArrayList<Integer> arrayDaysInMonth = new ArrayList<>();

            YearMonth yearMonthObject = YearMonth.of((Integer.parseInt(cboxDOBYear.getSelectedItem().toString())), Month.valueOf(cboxDOBMonth.getSelectedItem().toString()).getValue());
            int daysInMonthNumber = yearMonthObject.lengthOfMonth();

            for(int i = 1; i <= daysInMonthNumber; i++){
                arrayDaysInMonth.add(i);
            }

            if(previouslySelectedDay>=daysInMonthNumber)
                previouslySelectedDay = daysInMonthNumber;

            cboxDOBDay.setModel(new DefaultComboBoxModel(arrayDaysInMonth.toArray()));
            cboxDOBDay.setSelectedItem(previouslySelectedDay);
        }
    }
    
    private void readSelectedDate(){
            DOBDay = Integer.parseInt(cboxDOBDay.getSelectedItem().toString());
            DOBMonth = Month.valueOf(cboxDOBMonth.getSelectedItem().toString()).getValue();
            DOBYear = Integer.parseInt(cboxDOBYear.getSelectedItem().toString());
            DOBDate = LocalDate.of(DOBYear, DOBMonth, DOBDay);
    }
    
    private void updateInformations(){
        if(initialisationFinished){
            readSelectedDate();
            calculateAge();
            calculateTotals();
            calculateDayWeekOfYear();
            calculateDayOfTheWeek();
            getZodiacSign();
            getNatureElement();
            getBirthstone();
            calculateNailsTotalLenght();
            calculateHairTotalLenght();
            calculateEarthTravelDistance();
            calculateHeartBeatsTotal();
            calculateBloodLitersTotal();
            calculateBreathsTotal();
            calculateSnailTravelDistanceTotal();
            getHoroscope(lblZodiacSign.getText(), cboHoroscopeFor.getSelectedItem().toString());
        }
    }
    
    private void calculateAge(){
        Period period = Period.between(DOBDate, dateToday);

        lblYears.setText(String.valueOf(period.getYears()));
        lblMonths.setText(String.valueOf(period.getMonths()));
        lblDays.setText(String.valueOf(period.getDays()));  
    }
    
    private void calculateTotals(){
        long totalYears = ChronoUnit.YEARS.between(DOBDate, dateToday);
        long totalMonths = ChronoUnit.MONTHS.between(DOBDate, dateToday);
        long totalDays = ChronoUnit.DAYS.between(DOBDate, dateToday);
        long totalHours = totalDays * 24;
        long totalMinutes = totalHours * 60;
        long totalSeconds = totalMinutes * 60;
        long totalMiliseconds = totalSeconds * 100;
        
        switch(cboxSelectedUnits.getSelectedItem().toString())
        {
            case "years" -> lblTotalAmount.setText(String.valueOf(totalYears));
            case "months" -> lblTotalAmount.setText(String.valueOf(totalMonths));
            case "days" -> lblTotalAmount.setText(String.valueOf(totalDays));
            case "hours" -> lblTotalAmount.setText(String.valueOf(totalHours));
            case "minutes" -> lblTotalAmount.setText(String.valueOf(totalMinutes));
            case "seconds" -> lblTotalAmount.setText(String.valueOf(totalSeconds));
            case "miliseconds" -> lblTotalAmount.setText(String.valueOf(totalMiliseconds));
        }
    }
    
    private void calculateDayWeekOfYear(){
        lblDayOfYear.setText(String.valueOf(DOBDate.getDayOfYear()));
        lblWeekOfYear.setText(String.valueOf(DOBDate.get(ChronoField.ALIGNED_WEEK_OF_YEAR)));
        lblYear.setText(String.valueOf(DOBDate.getYear()));
    }
    
    private void calculateDayOfTheWeek(){
        lblDayOfTheWeek.setText(DOBDate.getDayOfWeek().toString());        
    }
    
    private void getZodiacSign(){
        int day = DOBDate.getDayOfMonth();
        String sign = "";
        
        switch (DOBDate.getMonth().toString()) {
            case "JANUARY" -> sign = (day < 20) ? "Capricorn" : "Aquarius";
            case "FEBRUARY" -> sign = (day < 19) ? "Aquarius" : "Pisces";
            case "MARCH" -> sign = (day < 21) ? "Pisces" : "Aries";
            case "APRIL" -> sign = (day < 20) ? "Aries" : "Taurus";
            case "MAY" -> sign = (day < 21) ? "Taurus" : "Gemini";
            case "JUNE" -> sign = (day < 21) ? "Gemini" : "Cancer";
            case "JULY" -> sign = (day < 23) ? "Cancer" : "Leo";
            case "AUGUST" -> sign = (day < 23) ? "Leo" : "Virgo";
            case "SEPTEMBER" -> sign = (day < 23) ? "Virgo" : "Libra";
            case "OCTOBER" -> sign = (day < 23) ? "Libra" : "Scorpio";
            case "NOVEMBER" -> sign = (day < 22) ? "Scorpio" : "Sagittarius";
            case "DECEMBER" -> sign = (day < 22) ? "Sagittarius" : "Capricorn";
            default -> {
            }
        }
        
        lblZodiacSign.setText(sign);
    }
    
    private void getNatureElement(){
        int lastYearDigit = DOBDate.getYear() - (DOBDate.getYear()/10)*10;
        String natureElement = "";
        
        switch(lastYearDigit/2){
            case 0 -> natureElement = "Metal";
            case 1 -> natureElement = "Water";
            case 2 -> natureElement = "Wood";
            case 3 -> natureElement = "Fire";
            case 4 -> natureElement = "Earth";
        }
        
        lblNatureElement.setText(natureElement);
    }
    
    private void getBirthstone(){
        String birthstone = "";
        switch (DOBDate.getMonth().toString()) {
            case "JANUARY" -> birthstone = "Garnet";
            case "FEBRUARY" -> birthstone = "Amethyst";
            case "MARCH" -> birthstone = "Aquamarine";
            case "APRIL" -> birthstone = "Diamond";
            case "MAY" -> birthstone = "Emerald";
            case "JUNE" -> birthstone = "Pearl";
            case "JULY" -> birthstone = "Ruby";
            case "AUGUST" -> birthstone = "Peridot";
            case "SEPTEMBER" -> birthstone = "Sapphire";
            case "OCTOBER" -> birthstone = "Tourmaline";
            case "NOVEMBER" -> birthstone = "Topaz";
            case "DECEMBER" -> birthstone = "Tanzanite";
            default -> {
            }
        }
        lblBirthstone.setText(birthstone);
    }
    
    private void calculateNailsTotalLenght(){
        double nailsTotalLenght = 4 * (double) ChronoUnit.YEARS.between(DOBDate, dateToday);
        if(nailsTotalLenght < 100){
            lblDescNails.setText("cm of nails.");
        }else{
            nailsTotalLenght = nailsTotalLenght / 100;
            lblDescNails.setText("m of nails.");
        }
        lblNailsTotalLenght.setText(String.valueOf(nailsTotalLenght));
    }
    
    private void calculateHairTotalLenght(){
        double hairTotalLenght = 12 * (double) ChronoUnit.YEARS.between(DOBDate, dateToday);
        if(hairTotalLenght < 100){
            lblDescHair.setText("cm of hair.");
        }else{
            hairTotalLenght = hairTotalLenght / 100;
            lblDescHair.setText("m of hair.");
        }
        lblHairTotalLenght.setText(String.valueOf(hairTotalLenght));
    }
    
    private void calculateEarthTravelDistance(){
        double earthTravelDistance = (66780 * (double) ChronoUnit.DAYS.between(DOBDate, dateToday) * 24) / 14959787.7;
        if(earthTravelDistance < 0.7){
            earthTravelDistance = earthTravelDistance * 14959787.7;
            lblDescEarthTravelDistance.setText("km around the Sun.");
        }else{
            earthTravelDistance = (int) (earthTravelDistance * 1000);
            earthTravelDistance = earthTravelDistance / 1000;
            lblDescEarthTravelDistance.setText("AU around the Sun.");
        }
        lblEarthTravelDistance.setText(String.valueOf(earthTravelDistance));
    }
    
    private void calculateHeartBeatsTotal(){
        double heartBeatsTotal = (int) (42075900 * (double) ChronoUnit.DAYS.between(DOBDate, dateToday) / 365.25);
        if(heartBeatsTotal < 1000){
            lblDescHeartBeats.setText("times.");
        }else if (heartBeatsTotal < 1000000){
            heartBeatsTotal = heartBeatsTotal / 1000;
            lblDescHeartBeats.setText("thounds times.");
        }else if (heartBeatsTotal < 1000000000){
            heartBeatsTotal = heartBeatsTotal / 1000000;
            lblDescHeartBeats.setText("milions times.");
        }else if (1000000000 < heartBeatsTotal){
            heartBeatsTotal = heartBeatsTotal / 1000000000;
            lblDescHeartBeats.setText("bilions times.");
        }
        lblHeartBeatsTotal.setText(String.valueOf(heartBeatsTotal));
    }
    
    private void calculateBloodLitersTotal(){
        double bloodLitersTotal = (int) (2688000 * (double) ChronoUnit.DAYS.between(DOBDate, dateToday) / 365.25);
        if(bloodLitersTotal < 1000){
            lblDescBloodLiters.setText("liters of blood through your vains.");
        }else if (bloodLitersTotal < 1000000){
            bloodLitersTotal = bloodLitersTotal / 1000;
            lblDescBloodLiters.setText("thounds liters of blood through your vains.");
        }else if (bloodLitersTotal < 1000000000){
            bloodLitersTotal = bloodLitersTotal / 1000000;
            lblDescBloodLiters.setText("milions liters of blood through your vains.");
        }else if (1000000000 < bloodLitersTotal){
            bloodLitersTotal = bloodLitersTotal / 1000000000;
            lblDescBloodLiters.setText("bilions liters of blood through your vains.");
        }
        lblBloodLitersTotal.setText(String.valueOf(bloodLitersTotal));
    }
    
    private void calculateBreathsTotal(){
        double breathsTotal = (int) (10512000 * (double) ChronoUnit.DAYS.between(DOBDate, dateToday) / 365.25);
        if(breathsTotal < 1000){
            lblDescBreathsTotal.setText("breaths.");
        }else if (breathsTotal < 1000000){
            breathsTotal = breathsTotal / 1000;
            lblDescBreathsTotal.setText("thounds breaths.");
        }else if (breathsTotal < 1000000000){
            breathsTotal = breathsTotal / 1000000;
            lblDescBreathsTotal.setText("milions breaths.");
        }else if (1000000000 <= breathsTotal){
            breathsTotal = breathsTotal / 1000000000;
            lblDescBreathsTotal.setText("bilions breaths.");
        }
        lblBreathsTotal.setText(String.valueOf(breathsTotal));
    }
    
    private void calculateSnailTravelDistanceTotal(){
        double snailTravelDistanceTotal = (int) (48.28032 * (double) ChronoUnit.DAYS.between(DOBDate, dateToday) * 24);
        if(snailTravelDistanceTotal < 1000){
            lblDescSnailTravelTotal.setText("km since your birthday.");
        }else if (snailTravelDistanceTotal < 1000000){
            snailTravelDistanceTotal = snailTravelDistanceTotal / 1000;
            lblDescSnailTravelTotal.setText("thounds km since your birthday.");
        }else if (snailTravelDistanceTotal < 1000000000){
            snailTravelDistanceTotal = snailTravelDistanceTotal / 1000000;
            lblDescSnailTravelTotal.setText("milions km since your birthday.");
        }else if (1000000000 < snailTravelDistanceTotal){
            snailTravelDistanceTotal = snailTravelDistanceTotal / 1000000000;
            lblDescSnailTravelTotal.setText("bilions km since your birthday.");
        }
        lblSnailTravelDistanceTotal.setText(String.valueOf(snailTravelDistanceTotal));
    }
    
    private void getHoroscope(String zodiacSign, String day){
        try{
            
            //You need to create file APIKeys.java from template provided
            //and add there your own API Key.
            APIKeys apiKeys = new APIKeys();
            String horoscopeApiKey = apiKeys.horoscopeApi;
            
            HttpRequest request = HttpRequest.newBuilder()
		.uri(URI.create("https://sameer-kumar-aztro-v1.p.rapidapi.com/?sign=" + zodiacSign + "&day=" + day))
		.header("x-rapidapi-host", "sameer-kumar-aztro-v1.p.rapidapi.com")
		.header("x-rapidapi-key", horoscopeApiKey)
		.method("POST", HttpRequest.BodyPublishers.noBody())
		.build();
        HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
        
        ScriptEngine scriptEngine;
        String json;
        
        ScriptEngineManager sem = new ScriptEngineManager();
        scriptEngine = sem.getEngineByName("javascript");
        
        String script = "Java.asJSONCompatible(" + response.body() + ")";
        Object result = scriptEngine.eval(script);
        Map contents = (Map) result;
        
        txtHoroscope.setText(contents.get("description").toString());
        }
        catch (Exception e){
            e.printStackTrace();
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JComboBox<String> cboHoroscopeFor;
    private javax.swing.JComboBox<String> cboxDOBDay;
    private javax.swing.JComboBox<String> cboxDOBMonth;
    private javax.swing.JComboBox<String> cboxDOBYear;
    private javax.swing.JComboBox<String> cboxSelectedUnits;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblBirthstone;
    private javax.swing.JLabel lblBloodLitersTotal;
    private javax.swing.JLabel lblBreathsTotal;
    private javax.swing.JLabel lblDOBDay;
    private javax.swing.JLabel lblDOBDayOfTheWeek;
    private javax.swing.JLabel lblDOBMonth;
    private javax.swing.JLabel lblDOBYear;
    private javax.swing.JLabel lblDayOfTheWeek;
    private javax.swing.JLabel lblDayOfYear;
    private javax.swing.JLabel lblDays;
    private javax.swing.JLabel lblDescBloodLiters;
    private javax.swing.JLabel lblDescBreathsTotal;
    private javax.swing.JLabel lblDescEarthTravelDistance;
    private javax.swing.JLabel lblDescHair;
    private javax.swing.JLabel lblDescHeartBeats;
    private javax.swing.JLabel lblDescNails;
    private javax.swing.JLabel lblDescSnailTravelTotal;
    private javax.swing.JLabel lblEarthTravelDistance;
    private javax.swing.JLabel lblHairTotalLenght;
    private javax.swing.JLabel lblHeartBeatsTotal;
    private javax.swing.JLabel lblHoroscopeFor;
    private javax.swing.JLabel lblMonths;
    private javax.swing.JLabel lblNailsTotalLenght;
    private javax.swing.JLabel lblNatureElement;
    private javax.swing.JLabel lblSnailTravelDistanceTotal;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JLabel lblWeekOfYear;
    private javax.swing.JLabel lblYear;
    private javax.swing.JLabel lblYears;
    private javax.swing.JLabel lblZodiacSign;
    private javax.swing.JPanel pnlDateOfBirth;
    private javax.swing.JPanel pnlFunnyFacts;
    private javax.swing.JPanel pnlGeneralFacts;
    private javax.swing.JPanel pnlHoroscope;
    private javax.swing.JTextArea txtHoroscope;
    // End of variables declaration//GEN-END:variables
}